/*
 * Sonos-net {{serviceName}}
 *
 * File is generated by [@svrooij/sonos-docs](https://github.com/svrooij/sonos-api-docs/tree/main/generator/sonos-docs)
 *
 * Repository https://github.com/svrooij/sonos-net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Sonos.Base.Services;

using System.Threading;
using System.Threading.Tasks;

/// <summary>
/// {{serviceName}} {{#if description}} - {{{description}}}{{/if}}
/// </summary>
public partial class {{serviceName}} : SonosBaseService
{
    /// <summary>
    /// Create a new {{serviceName}}
    /// </summary>
    /// <param name="options">Service options</param>
    public {{serviceName}}(SonosServiceOptions options) : base("{{name}}", "{{controlURL}}", "{{eventSubURL}}", options) { }

    {{#each actions}}

    /// <summary>
    /// {{#if description}}{{{description}}}{{else}}{{name}}{{/if}}
    /// </summary>{{#if inputs}}
    /// <param name="request">Body payload</param>{{/if}}
    /// <param name="cancellationToken">CancellationToken</param>{{#if remarks}}
    /// <remarks>{{{remarks}}}</remarks>{{/if}}
    /// <returns>{{#if outputs}}{{name}}Response{{else}}Success boolean{{/if}}</returns>
    public Task<{{#if outputs}}{{name}}Response{{else}}bool{{/if}}> {{name}}({{#if inputs}}{{#if (sonos_if_only_instance_id inputs 'true')}}{{else}}{{name}}Request request, {{/if}}{{/if}}CancellationToken cancellationToken = default) =>
{{~#if outputs}}
 {{#if inputs}}ExecuteRequest<{{name}}Request, {{name}}Response>({{#if (sonos_if_only_instance_id inputs 'true')}}new {{name}}Request(){{else}}request{{/if}}, cancellationToken);{{else}}ExecuteRequest<BaseRequest, {{name}}Response>(new BaseRequest(), cancellationToken);{{/if}}
{{else}}
 {{#if inputs}}ExecuteRequest<{{name}}Request>({{#if (sonos_if_only_instance_id inputs 'true')}}new {{name}}Request(){{else}}request{{/if}}, cancellationToken);{{else}}ExecuteRequest<BaseRequest>(new BaseRequest(), cancellationToken);{{/if}}
{{/if}}
    {{/each}}

    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("{{controlURL}}", "{{name}}")]
    public class BaseRequest
    {
        [System.Xml.Serialization.XmlNamespaceDeclarations]
        public System.Xml.Serialization.XmlSerializerNamespaces xmlns = new System.Xml.Serialization.XmlSerializerNamespaces(
          new[] { new System.Xml.XmlQualifiedName("u", "urn:schemas-upnp-org:service:{{name}}:1"), });
    }
    {{#each actions}}
    {{#if inputs}}

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("{{@root.controlURL}}", "{{@root.name}}", "{{name}}")]
    public class {{name}}Request : BaseRequest
    {
        {{#each inputs ~}}
        {{#if description}}
        /// <summary>
        /// {{{description}}}
        /// </summary>
        {{/if}}
        public {{{relatedStateVariable.dataType}}} {{name}} { get; set; }{{#if (are_equal name 'InstanceID')}} = 0;{{/if}}
        {{#if (ends_with name 'MetaData')}}

        /// <summary>
        /// Generate {{name}} xml from Didl data
        /// </summary>
        public Metadata.Didl {{name}}Object
        {
            set
            {
                {{name}} = Metadata.DidlSerializer.SerializeMetadata(value);
            }
        }
        {{/if}}
        {{#unless @last}}

        {{/unless}}
        {{/each}}
    }
    {{/if}}
    {{#if outputs}}

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("{{name}}Response", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:{{@root.name}}:1")]
    public partial class {{name}}Response
    {
        {{#each outputs ~}}
        {{#if description}}
        /// <summary>
        /// {{{description}}}
        /// </summary>
        {{/if}}
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public {{{relatedStateVariable.dataType}}} {{name}} { get; set; }
        {{#if (ends_with name 'MetaData')}}

        /// <summary>
        /// Parsed version of {{name}}
        /// </summary>
        public Metadata.Didl? {{name}}Object
        {
            get
            {
                return Metadata.DidlSerializer.DeserializeMetadata({{name}});
            }
        }
        {{/if}}
        {{#unless @last}}

        {{/unless}}
        {{/each}}
    }
    {{/if}}
    {{/each}}
    {{#if errors}}

    private readonly static Dictionary<int, SonosUpnpError> serviceSpecificErrors = new Dictionary<int, SonosUpnpError>{
        {{#each errors}}
        { {{code}}, new SonosUpnpError({{code}}, "{{{description}}}") },
        {{/each}}
    };

    internal override Dictionary<int, SonosUpnpError> ServiceErrors => serviceSpecificErrors.Merge(base.ServiceErrors);
    {{/if}}
}
