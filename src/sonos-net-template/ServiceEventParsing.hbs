/*
 * Sonos-net {{serviceName}} event parsing
 *
 * File is generated by [@svrooij/sonos-docs](https://github.com/svrooij/sonos-api-docs/tree/main/generator/sonos-docs)
 *
 * Repository https://github.com/svrooij/sonos-net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Sonos.Base.Events.Http.Models;

using Sonos.Base.Services;

{{#if eventVariables}}

#nullable enable
/// <summary>
/// {{name}} is set to might emit these properties in events
/// </summary>
public partial class {{name}}Event: {{serviceName}}.I{{name}}Event {
{{#each eventVariables}}
    public {{#if (or (are_equal name 'Volume') (are_equal name 'Mute'))}}{{#if (are_equal name 'Mute')}}ChannelMapBool{{else}}ChannelMapInt{{/if}}{{else}}{{{dataType}}}{{/if}}? {{name}} { get; init; }
    {{#if (ends_with name 'MetaData')}}

    /// <summary>
    /// Parsed version of {{name}}
    /// </summary>
    public Metadata.Didl? {{name}}Object => Metadata.DidlSerializer.DeserializeMetadata({{name}});
    {{/if}}
    {{#unless @last}}

    {{/unless}}
{{/each}}

    internal static {{name}}Event? FromDictionary(Dictionary<string, string>? dic)
    {
        if (dic is null) {
            return null;
        }
        return new {{name}}Event {
{{#each eventVariables}}
{{#if (are_equal dataType 'int')}}
{{#if (are_equal name 'Volume')}}
            {{name}} = dic.TryGetMapInt(nameof({{name}})),
{{else}}
            {{name}} = dic.TryGetInt(nameof({{name}})),
{{/if}}            
{{/if}}
{{#if (are_equal dataType 'bool')}}
{{#if (are_equal name 'Mute')}}
            {{name}} = dic.TryGetMapBool(nameof({{name}})),
{{else}}
            {{name}} = dic.TryGetBool(nameof({{name}})),
{{/if}}
{{/if}}
{{#if (are_equal dataType 'string')}}
            {{name}} = dic.TryGetString(nameof({{name}})),
{{/if}}
{{/each}}
        };
    }
}
{{/if}}

