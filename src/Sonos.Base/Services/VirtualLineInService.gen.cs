/*
 * Sonos-net VirtualLineInService
 *
 * File is generated by [@svrooij/sonos-docs](https://github.com/svrooij/sonos-api-docs/tree/main/generator/sonos-docs)
 *
 * Repository https://github.com/svrooij/sonos-net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Sonos.Base.Services;

using System.Threading;
using System.Threading.Tasks;

/// <summary>
/// VirtualLineInService 
/// </summary>
public partial class VirtualLineInService : SonosBaseService
{
    /// <summary>
    /// Create a new VirtualLineInService
    /// </summary>
    /// <param name="options">Service options</param>
    public VirtualLineInService(SonosServiceOptions options) : base("VirtualLineIn", "/MediaRenderer/VirtualLineIn/Control", "/MediaRenderer/VirtualLineIn/Event", options) { }


    /// <summary>
    /// Next
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    public Task<bool> Next(CancellationToken cancellationToken = default) => ExecuteRequest<NextRequest>(new NextRequest(), cancellationToken);

    /// <summary>
    /// Pause
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    public Task<bool> Pause(CancellationToken cancellationToken = default) => ExecuteRequest<PauseRequest>(new PauseRequest(), cancellationToken);

    /// <summary>
    /// Play
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    public Task<bool> Play(PlayRequest request, CancellationToken cancellationToken = default) => ExecuteRequest<PlayRequest>(request, cancellationToken);

    /// <summary>
    /// Previous
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    public Task<bool> Previous(CancellationToken cancellationToken = default) => ExecuteRequest<PreviousRequest>(new PreviousRequest(), cancellationToken);

    /// <summary>
    /// SetVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetVolume(SetVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequest<SetVolumeRequest>(request, cancellationToken);

    /// <summary>
    /// StartTransmission
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>StartTransmissionResponse</returns>
    public Task<StartTransmissionResponse> StartTransmission(StartTransmissionRequest request, CancellationToken cancellationToken = default) => ExecuteRequest<StartTransmissionRequest, StartTransmissionResponse>(request, cancellationToken);

    /// <summary>
    /// Stop
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    public Task<bool> Stop(CancellationToken cancellationToken = default) => ExecuteRequest<StopRequest>(new StopRequest(), cancellationToken);

    /// <summary>
    /// StopTransmission
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    public Task<bool> StopTransmission(StopTransmissionRequest request, CancellationToken cancellationToken = default) => ExecuteRequest<StopTransmissionRequest>(request, cancellationToken);

    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn")]
    public class BaseRequest
    {
        [System.Xml.Serialization.XmlNamespaceDeclarations]
        public System.Xml.Serialization.XmlSerializerNamespaces xmlns = new System.Xml.Serialization.XmlSerializerNamespaces(
          new[] { new System.Xml.XmlQualifiedName("u", "urn:schemas-upnp-org:service:VirtualLineIn:1"), });
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "Next")]
    public class NextRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "Pause")]
    public class PauseRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "Play")]
    public class PlayRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;

        public string Speed { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "Previous")]
    public class PreviousRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "SetVolume")]
    public class SetVolumeRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;

        public int DesiredVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "StartTransmission")]
    public class StartTransmissionRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;

        public string CoordinatorID { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("StartTransmissionResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:VirtualLineIn:1")]
    public partial class StartTransmissionResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentTransportSettings { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "Stop")]
    public class StopRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/VirtualLineIn/Control", "VirtualLineIn", "StopTransmission")]
    public class StopTransmissionRequest : BaseRequest
    {
        public int InstanceID { get; set; } = 0;

        public string CoordinatorID { get; set; }
    }
}
