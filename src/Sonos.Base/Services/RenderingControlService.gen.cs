/*
 * Sonos-net RenderingControlService
 *
 * File is generated by [@svrooij/sonos-docs](https://github.com/svrooij/sonos-api-docs/tree/main/generator/sonos-docs)
 *
 * Repository https://github.com/svrooij/sonos-net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Sonos.Base.Services;

using System.Threading;
using System.Threading.Tasks;

/// <summary>
/// RenderingControlService  - Volume related controls
/// </summary>
public partial class RenderingControlService : SonosBaseService<RenderingControlService.IRenderingControlEvent>
{
    /// <summary>
    /// Create a new RenderingControlService
    /// </summary>
    /// <param name="options">Service options</param>
    public RenderingControlService(SonosServiceOptions options) : base(SonosService.RenderingControl, "/MediaRenderer/RenderingControl/Control", "/MediaRenderer/RenderingControl/Event", options) { }


    /// <summary>
    /// Get bass level between -10 and 10
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetBassResponse</returns>
    public Task<GetBassResponse> GetBassAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetBassRequest, GetBassResponse>(new GetBassRequest(), cancellationToken, "GetBass");

    /// <summary>
    /// Get equalizer value
    /// </summary>
    /// <param name="request"><see cref="GetEQRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <remarks>Not all EQ types are available on every speaker</remarks>
    /// <returns>GetEQResponse</returns>
    public Task<GetEQResponse> GetEQAsync(GetEQRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetEQRequest, GetEQResponse>(request, cancellationToken, "GetEQ");

    /// <summary>
    /// GetHeadphoneConnected
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetHeadphoneConnectedResponse</returns>
    public Task<GetHeadphoneConnectedResponse> GetHeadphoneConnectedAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetHeadphoneConnectedRequest, GetHeadphoneConnectedResponse>(new GetHeadphoneConnectedRequest(), cancellationToken, "GetHeadphoneConnected");

    /// <summary>
    /// Whether or not Loudness is on
    /// </summary>
    /// <param name="request"><see cref="GetLoudnessRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetLoudnessResponse</returns>
    public Task<GetLoudnessResponse> GetLoudnessAsync(GetLoudnessRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetLoudnessRequest, GetLoudnessResponse>(request, cancellationToken, "GetLoudness");

    /// <summary>
    /// GetMute
    /// </summary>
    /// <param name="request"><see cref="GetMuteRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetMuteResponse</returns>
    public Task<GetMuteResponse> GetMuteAsync(GetMuteRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetMuteRequest, GetMuteResponse>(request, cancellationToken, "GetMute");

    /// <summary>
    /// GetOutputFixed
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetOutputFixedResponse</returns>
    public Task<GetOutputFixedResponse> GetOutputFixedAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetOutputFixedRequest, GetOutputFixedResponse>(new GetOutputFixedRequest(), cancellationToken, "GetOutputFixed");

    /// <summary>
    /// GetRoomCalibrationStatus
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetRoomCalibrationStatusResponse</returns>
    public Task<GetRoomCalibrationStatusResponse> GetRoomCalibrationStatusAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetRoomCalibrationStatusRequest, GetRoomCalibrationStatusResponse>(new GetRoomCalibrationStatusRequest(), cancellationToken, "GetRoomCalibrationStatus");

    /// <summary>
    /// GetSupportsOutputFixed
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetSupportsOutputFixedResponse</returns>
    public Task<GetSupportsOutputFixedResponse> GetSupportsOutputFixedAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetSupportsOutputFixedRequest, GetSupportsOutputFixedResponse>(new GetSupportsOutputFixedRequest(), cancellationToken, "GetSupportsOutputFixed");

    /// <summary>
    /// Get treble
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetTrebleResponse</returns>
    public Task<GetTrebleResponse> GetTrebleAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetTrebleRequest, GetTrebleResponse>(new GetTrebleRequest(), cancellationToken, "GetTreble");

    /// <summary>
    /// Get volume
    /// </summary>
    /// <param name="request"><see cref="GetVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetVolumeResponse</returns>
    public Task<GetVolumeResponse> GetVolumeAsync(GetVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetVolumeRequest, GetVolumeResponse>(request, cancellationToken, "GetVolume");

    /// <summary>
    /// GetVolumeDB
    /// </summary>
    /// <param name="request"><see cref="GetVolumeDBRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetVolumeDBResponse</returns>
    public Task<GetVolumeDBResponse> GetVolumeDBAsync(GetVolumeDBRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetVolumeDBRequest, GetVolumeDBResponse>(request, cancellationToken, "GetVolumeDB");

    /// <summary>
    /// GetVolumeDBRange
    /// </summary>
    /// <param name="request"><see cref="GetVolumeDBRangeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetVolumeDBRangeResponse</returns>
    public Task<GetVolumeDBRangeResponse> GetVolumeDBRangeAsync(GetVolumeDBRangeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetVolumeDBRangeRequest, GetVolumeDBRangeResponse>(request, cancellationToken, "GetVolumeDBRange");

    /// <summary>
    /// RampToVolume
    /// </summary>
    /// <param name="request"><see cref="RampToVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>RampToVolumeResponse</returns>
    public Task<RampToVolumeResponse> RampToVolumeAsync(RampToVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<RampToVolumeRequest, RampToVolumeResponse>(request, cancellationToken, "RampToVolume");

    /// <summary>
    /// ResetBasicEQ
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>ResetBasicEQResponse</returns>
    public Task<ResetBasicEQResponse> ResetBasicEQAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<ResetBasicEQRequest, ResetBasicEQResponse>(new ResetBasicEQRequest(), cancellationToken, "ResetBasicEQ");

    /// <summary>
    /// ResetExtEQ
    /// </summary>
    /// <param name="request"><see cref="ResetExtEQRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> ResetExtEQAsync(ResetExtEQRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "ResetExtEQ");

    /// <summary>
    /// RestoreVolumePriorToRamp
    /// </summary>
    /// <param name="request"><see cref="RestoreVolumePriorToRampRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> RestoreVolumePriorToRampAsync(RestoreVolumePriorToRampRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "RestoreVolumePriorToRamp");

    /// <summary>
    /// Set bass level, between -10 and 10
    /// </summary>
    /// <param name="request"><see cref="SetBassRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetBassAsync(SetBassRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetBass");

    /// <summary>
    /// SetChannelMap
    /// </summary>
    /// <param name="request"><see cref="SetChannelMapRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetChannelMapAsync(SetChannelMapRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetChannelMap");

    /// <summary>
    /// Set equalizer value for different types
    /// </summary>
    /// <param name="request"><see cref="SetEQRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <remarks>Not supported by all speakers, TV related</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> SetEQAsync(SetEQRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetEQ");

    /// <summary>
    /// Set loudness on / off
    /// </summary>
    /// <param name="request"><see cref="SetLoudnessRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetLoudnessAsync(SetLoudnessRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetLoudness");

    /// <summary>
    /// SetMute
    /// </summary>
    /// <param name="request"><see cref="SetMuteRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetMuteAsync(SetMuteRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetMute");

    /// <summary>
    /// SetOutputFixed
    /// </summary>
    /// <param name="request"><see cref="SetOutputFixedRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetOutputFixedAsync(SetOutputFixedRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetOutputFixed");

    /// <summary>
    /// SetRelativeVolume
    /// </summary>
    /// <param name="request"><see cref="SetRelativeVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>SetRelativeVolumeResponse</returns>
    public Task<SetRelativeVolumeResponse> SetRelativeVolumeAsync(SetRelativeVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<SetRelativeVolumeRequest, SetRelativeVolumeResponse>(request, cancellationToken, "SetRelativeVolume");

    /// <summary>
    /// SetRoomCalibrationStatus
    /// </summary>
    /// <param name="request"><see cref="SetRoomCalibrationStatusRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetRoomCalibrationStatusAsync(SetRoomCalibrationStatusRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetRoomCalibrationStatus");

    /// <summary>
    /// SetRoomCalibrationX
    /// </summary>
    /// <param name="request"><see cref="SetRoomCalibrationXRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetRoomCalibrationXAsync(SetRoomCalibrationXRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetRoomCalibrationX");

    /// <summary>
    /// Set treble level
    /// </summary>
    /// <param name="request"><see cref="SetTrebleRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetTrebleAsync(SetTrebleRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetTreble");

    /// <summary>
    /// SetVolume
    /// </summary>
    /// <param name="request"><see cref="SetVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetVolumeAsync(SetVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetVolume");

    /// <summary>
    /// SetVolumeDB
    /// </summary>
    /// <param name="request"><see cref="SetVolumeDBRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetVolumeDBAsync(SetVolumeDBRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetVolumeDB");

    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl")]
    public class BaseRequest
    {
        [System.Xml.Serialization.XmlNamespaceDeclarations]
        public System.Xml.Serialization.XmlSerializerNamespaces xmlns = new System.Xml.Serialization.XmlSerializerNamespaces(
          new[] { new System.Xml.XmlQualifiedName("u", "urn:schemas-upnp-org:service:RenderingControl:1"), });
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetBass")]
    public class GetBassRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetBassResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetBassResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int CurrentBass { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetEQ")]
    public class GetEQRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        /// <summary>
        /// Allowed values `DialogLevel` (bool) / `MusicSurroundLevel` (-15/+15) /  `NightMode` (bool) / `SubGain` (-10/+10) / `SurroundEnable` (bool) / `SurroundLevel` (-15/+15) / `SurroundMode` (0 = ambient, 1 = full) / `HeightChannelLevel` (-10/+10)
        /// </summary>
        public string EQType { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetEQResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetEQResponse
    {
        /// <summary>
        /// Booleans return `1` / `0`, rest number as specified
        /// </summary>
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int CurrentValue { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetHeadphoneConnected")]
    public class GetHeadphoneConnectedRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetHeadphoneConnectedResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetHeadphoneConnectedResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool CurrentHeadphoneConnected { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetLoudness")]
    public class GetLoudnessRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetLoudnessResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetLoudnessResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool CurrentLoudness { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetMute")]
    public class GetMuteRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetMuteResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetMuteResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool CurrentMute { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetOutputFixed")]
    public class GetOutputFixedRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetOutputFixedResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetOutputFixedResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool CurrentFixed { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetRoomCalibrationStatus")]
    public class GetRoomCalibrationStatusRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetRoomCalibrationStatusResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetRoomCalibrationStatusResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool RoomCalibrationEnabled { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool RoomCalibrationAvailable { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetSupportsOutputFixed")]
    public class GetSupportsOutputFixedRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetSupportsOutputFixedResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetSupportsOutputFixedResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool CurrentSupportsFixed { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetTreble")]
    public class GetTrebleRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetTrebleResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetTrebleResponse
    {
        /// <summary>
        /// Number between -10 and 10
        /// </summary>
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int CurrentTreble { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetVolume")]
    public class GetVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetVolumeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetVolumeResponse
    {
        /// <summary>
        /// Number between 0 and 100
        /// </summary>
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int CurrentVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetVolumeDB")]
    public class GetVolumeDBRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetVolumeDBResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetVolumeDBResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int CurrentVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "GetVolumeDBRange")]
    public class GetVolumeDBRangeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetVolumeDBRangeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class GetVolumeDBRangeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int MinValue { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int MaxValue { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "RampToVolume")]
    public class RampToVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }

        public string RampType { get; set; }

        public int DesiredVolume { get; set; }

        public bool ResetVolumeAfter { get; set; }

        public string ProgramURI { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("RampToVolumeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class RampToVolumeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int RampTime { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "ResetBasicEQ")]
    public class ResetBasicEQRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("ResetBasicEQResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class ResetBasicEQResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int Bass { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int Treble { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool Loudness { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int LeftVolume { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int RightVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "ResetExtEQ")]
    public class ResetExtEQRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string EQType { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "RestoreVolumePriorToRamp")]
    public class RestoreVolumePriorToRampRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetBass")]
    public class SetBassRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public int DesiredBass { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetChannelMap")]
    public class SetChannelMapRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string ChannelMap { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetEQ")]
    public class SetEQRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        /// <summary>
        /// Allowed values `DialogLevel` (bool) / `MusicSurroundLevel` (-15/+15) /  `NightMode` (bool) / `SubGain` (-10/+10) / `SurroundEnable` (bool) / `SurroundLevel` (-15/+15) / `SurroundMode` (0 = ambient, 1 = full) / `HeightChannelLevel` (-10/+10)
        /// </summary>
        public string EQType { get; set; }

        /// <summary>
        /// Booleans required `1` for true or `0` for false, rest number as specified
        /// </summary>
        public int DesiredValue { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetLoudness")]
    public class SetLoudnessRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }

        public bool DesiredLoudness { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetMute")]
    public class SetMuteRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }

        public bool DesiredMute { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetOutputFixed")]
    public class SetOutputFixedRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public bool DesiredFixed { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetRelativeVolume")]
    public class SetRelativeVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }

        public int Adjustment { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("SetRelativeVolumeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:RenderingControl:1")]
    public partial class SetRelativeVolumeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int NewVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetRoomCalibrationStatus")]
    public class SetRoomCalibrationStatusRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public bool RoomCalibrationEnabled { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetRoomCalibrationX")]
    public class SetRoomCalibrationXRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string CalibrationID { get; set; }

        public string Coefficients { get; set; }

        public string CalibrationMode { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetTreble")]
    public class SetTrebleRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        /// <summary>
        /// between -10 and 10
        /// </summary>
        public int DesiredTreble { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetVolume")]
    public class SetVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }

        public int DesiredVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/RenderingControl/Control", "RenderingControl", "SetVolumeDB")]
    public class SetVolumeDBRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public string Channel { get; set; }

        public int DesiredVolume { get; set; }
    }

    /// <summary>
    /// RenderingControl is set to might emit these properties in events
    /// </summary>
    public partial interface IRenderingControlEvent : IServiceEvent
    {
        public string? AudioDelay { get; }

        public string? AudioDelayLeftRear { get; }

        public string? AudioDelayRightRear { get; }

        public int? Bass { get; }

        public string? DialogLevel { get; }

        public int? EQValue { get; }

        public bool? HeadphoneConnected { get; }

        public int? HeightChannelLevel { get; }

        public string? LastChange { get; }

        public bool? Loudness { get; }

        public string? MusicSurroundLevel { get; }

        public ChannelMapBool? Mute { get; }

        public bool? NightMode { get; }

        public bool? OutputFixed { get; }

        public string? PresetNameList { get; }

        public bool? RoomCalibrationAvailable { get; }

        public string? RoomCalibrationCalibrationMode { get; }

        public string? RoomCalibrationCoefficients { get; }

        public bool? RoomCalibrationEnabled { get; }

        public string? RoomCalibrationID { get; }

        public int? SpeakerSize { get; }

        public string? SubCrossover { get; }

        public bool? SubEnabled { get; }

        public string? SubGain { get; }

        public string? SubPolarity { get; }

        public bool? SupportsOutputFixed { get; }

        public bool? SurroundEnabled { get; }

        public string? SurroundLevel { get; }

        public string? SurroundMode { get; }

        public int? Treble { get; }

        public ChannelMapInt? Volume { get; }

        public int? VolumeDB { get; }
    }

    /// <summary>
    /// Get bass level between -10 and 10
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetBassResponse</returns>
    [Obsolete("This method is obsolete. Use GetBassAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetBassResponse> GetBass(CancellationToken cancellationToken = default) => GetBassAsync(cancellationToken);

    /// <summary>
    /// Get equalizer value
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Not all EQ types are available on every speaker</remarks>
    /// <returns>GetEQResponse</returns>
    [Obsolete("This method is obsolete. Use GetEQAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetEQResponse> GetEQ(GetEQRequest request, CancellationToken cancellationToken = default) => GetEQAsync(request, cancellationToken);

    /// <summary>
    /// GetHeadphoneConnected
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetHeadphoneConnectedResponse</returns>
    [Obsolete("This method is obsolete. Use GetHeadphoneConnectedAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetHeadphoneConnectedResponse> GetHeadphoneConnected(CancellationToken cancellationToken = default) => GetHeadphoneConnectedAsync(cancellationToken);

    /// <summary>
    /// Whether or not Loudness is on
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetLoudnessResponse</returns>
    [Obsolete("This method is obsolete. Use GetLoudnessAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetLoudnessResponse> GetLoudness(GetLoudnessRequest request, CancellationToken cancellationToken = default) => GetLoudnessAsync(request, cancellationToken);

    /// <summary>
    /// GetMute
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetMuteResponse</returns>
    [Obsolete("This method is obsolete. Use GetMuteAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetMuteResponse> GetMute(GetMuteRequest request, CancellationToken cancellationToken = default) => GetMuteAsync(request, cancellationToken);

    /// <summary>
    /// GetOutputFixed
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetOutputFixedResponse</returns>
    [Obsolete("This method is obsolete. Use GetOutputFixedAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetOutputFixedResponse> GetOutputFixed(CancellationToken cancellationToken = default) => GetOutputFixedAsync(cancellationToken);

    /// <summary>
    /// GetRoomCalibrationStatus
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetRoomCalibrationStatusResponse</returns>
    [Obsolete("This method is obsolete. Use GetRoomCalibrationStatusAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetRoomCalibrationStatusResponse> GetRoomCalibrationStatus(CancellationToken cancellationToken = default) => GetRoomCalibrationStatusAsync(cancellationToken);

    /// <summary>
    /// GetSupportsOutputFixed
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetSupportsOutputFixedResponse</returns>
    [Obsolete("This method is obsolete. Use GetSupportsOutputFixedAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetSupportsOutputFixedResponse> GetSupportsOutputFixed(CancellationToken cancellationToken = default) => GetSupportsOutputFixedAsync(cancellationToken);

    /// <summary>
    /// Get treble
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetTrebleResponse</returns>
    [Obsolete("This method is obsolete. Use GetTrebleAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetTrebleResponse> GetTreble(CancellationToken cancellationToken = default) => GetTrebleAsync(cancellationToken);

    /// <summary>
    /// Get volume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetVolumeResponse</returns>
    [Obsolete("This method is obsolete. Use GetVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetVolumeResponse> GetVolume(GetVolumeRequest request, CancellationToken cancellationToken = default) => GetVolumeAsync(request, cancellationToken);

    /// <summary>
    /// GetVolumeDB
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetVolumeDBResponse</returns>
    [Obsolete("This method is obsolete. Use GetVolumeDBAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetVolumeDBResponse> GetVolumeDB(GetVolumeDBRequest request, CancellationToken cancellationToken = default) => GetVolumeDBAsync(request, cancellationToken);

    /// <summary>
    /// GetVolumeDBRange
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetVolumeDBRangeResponse</returns>
    [Obsolete("This method is obsolete. Use GetVolumeDBRangeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetVolumeDBRangeResponse> GetVolumeDBRange(GetVolumeDBRangeRequest request, CancellationToken cancellationToken = default) => GetVolumeDBRangeAsync(request, cancellationToken);

    /// <summary>
    /// RampToVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>RampToVolumeResponse</returns>
    [Obsolete("This method is obsolete. Use RampToVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<RampToVolumeResponse> RampToVolume(RampToVolumeRequest request, CancellationToken cancellationToken = default) => RampToVolumeAsync(request, cancellationToken);

    /// <summary>
    /// ResetBasicEQ
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>ResetBasicEQResponse</returns>
    [Obsolete("This method is obsolete. Use ResetBasicEQAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<ResetBasicEQResponse> ResetBasicEQ(CancellationToken cancellationToken = default) => ResetBasicEQAsync(cancellationToken);

    /// <summary>
    /// ResetExtEQ
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use ResetExtEQAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> ResetExtEQ(ResetExtEQRequest request, CancellationToken cancellationToken = default) => ResetExtEQAsync(request, cancellationToken);

    /// <summary>
    /// RestoreVolumePriorToRamp
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use RestoreVolumePriorToRampAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> RestoreVolumePriorToRamp(RestoreVolumePriorToRampRequest request, CancellationToken cancellationToken = default) => RestoreVolumePriorToRampAsync(request, cancellationToken);

    /// <summary>
    /// Set bass level, between -10 and 10
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetBassAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetBass(SetBassRequest request, CancellationToken cancellationToken = default) => SetBassAsync(request, cancellationToken);

    /// <summary>
    /// SetChannelMap
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetChannelMapAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetChannelMap(SetChannelMapRequest request, CancellationToken cancellationToken = default) => SetChannelMapAsync(request, cancellationToken);

    /// <summary>
    /// Set equalizer value for different types
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Not supported by all speakers, TV related</remarks>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetEQAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetEQ(SetEQRequest request, CancellationToken cancellationToken = default) => SetEQAsync(request, cancellationToken);

    /// <summary>
    /// Set loudness on / off
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetLoudnessAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetLoudness(SetLoudnessRequest request, CancellationToken cancellationToken = default) => SetLoudnessAsync(request, cancellationToken);

    /// <summary>
    /// SetMute
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetMuteAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetMute(SetMuteRequest request, CancellationToken cancellationToken = default) => SetMuteAsync(request, cancellationToken);

    /// <summary>
    /// SetOutputFixed
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetOutputFixedAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetOutputFixed(SetOutputFixedRequest request, CancellationToken cancellationToken = default) => SetOutputFixedAsync(request, cancellationToken);

    /// <summary>
    /// SetRelativeVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>SetRelativeVolumeResponse</returns>
    [Obsolete("This method is obsolete. Use SetRelativeVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<SetRelativeVolumeResponse> SetRelativeVolume(SetRelativeVolumeRequest request, CancellationToken cancellationToken = default) => SetRelativeVolumeAsync(request, cancellationToken);

    /// <summary>
    /// SetRoomCalibrationStatus
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetRoomCalibrationStatusAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetRoomCalibrationStatus(SetRoomCalibrationStatusRequest request, CancellationToken cancellationToken = default) => SetRoomCalibrationStatusAsync(request, cancellationToken);

    /// <summary>
    /// SetRoomCalibrationX
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetRoomCalibrationXAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetRoomCalibrationX(SetRoomCalibrationXRequest request, CancellationToken cancellationToken = default) => SetRoomCalibrationXAsync(request, cancellationToken);

    /// <summary>
    /// Set treble level
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetTrebleAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetTreble(SetTrebleRequest request, CancellationToken cancellationToken = default) => SetTrebleAsync(request, cancellationToken);

    /// <summary>
    /// SetVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetVolume(SetVolumeRequest request, CancellationToken cancellationToken = default) => SetVolumeAsync(request, cancellationToken);

    /// <summary>
    /// SetVolumeDB
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetVolumeDBAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetVolumeDB(SetVolumeDBRequest request, CancellationToken cancellationToken = default) => SetVolumeDBAsync(request, cancellationToken);
}
