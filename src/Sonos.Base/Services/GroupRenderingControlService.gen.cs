/*
 * Sonos-net GroupRenderingControlService
 *
 * File is generated by [@svrooij/sonos-docs](https://github.com/svrooij/sonos-api-docs/tree/main/generator/sonos-docs)
 *
 * Repository https://github.com/svrooij/sonos-net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Sonos.Base.Services;

using System.Threading;
using System.Threading.Tasks;

/// <summary>
/// GroupRenderingControlService  - Volume related controls for groups
/// </summary>
public partial class GroupRenderingControlService : SonosBaseService<GroupRenderingControlService.IGroupRenderingControlEvent>
{
    /// <summary>
    /// Create a new GroupRenderingControlService
    /// </summary>
    /// <param name="options">Service options</param>
    public GroupRenderingControlService(SonosServiceOptions options) : base(SonosService.GroupRenderingControl, "/MediaRenderer/GroupRenderingControl/Control", "/MediaRenderer/GroupRenderingControl/Event", options) { }


    /// <summary>
    /// Get the group mute state.
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Should be send to coordinator only</remarks>
    /// <returns>GetGroupMuteResponse</returns>
    public Task<GetGroupMuteResponse> GetGroupMute(CancellationToken cancellationToken = default) => ExecuteRequest<GetGroupMuteRequest, GetGroupMuteResponse>(new GetGroupMuteRequest(), cancellationToken);

    /// <summary>
    /// Get the group volume.
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Should be send to coordinator only</remarks>
    /// <returns>GetGroupVolumeResponse</returns>
    public Task<GetGroupVolumeResponse> GetGroupVolume(CancellationToken cancellationToken = default) => ExecuteRequest<GetGroupVolumeRequest, GetGroupVolumeResponse>(new GetGroupVolumeRequest(), cancellationToken);

    /// <summary>
    /// (Un-/)Mute the entire group
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Should be send to coordinator only</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> SetGroupMute(SetGroupMuteRequest request, CancellationToken cancellationToken = default) => ExecuteRequest(request, cancellationToken);

    /// <summary>
    /// Change group volume. Players volume will be changed proportionally based on last snapshot
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Should be send to coordinator only</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> SetGroupVolume(SetGroupVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequest(request, cancellationToken);

    /// <summary>
    /// Relatively change group volume - returns final group volume. Players volume will be changed proportionally based on last snapshot
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Should be send to coordinator only</remarks>
    /// <returns>SetRelativeGroupVolumeResponse</returns>
    public Task<SetRelativeGroupVolumeResponse> SetRelativeGroupVolume(SetRelativeGroupVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequest<SetRelativeGroupVolumeRequest, SetRelativeGroupVolumeResponse>(request, cancellationToken);

    /// <summary>
    /// Creates a new group volume snapshot,  the volume ratio between all players. It is used by SetGroupVolume and SetRelativeGroupVolume
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Should be send to coordinator only</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> SnapshotGroupVolume(CancellationToken cancellationToken = default) => ExecuteRequest(new SnapshotGroupVolumeRequest(), cancellationToken);

    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/GroupRenderingControl/Control", "GroupRenderingControl")]
    public class BaseRequest
    {
        [System.Xml.Serialization.XmlNamespaceDeclarations]
        public System.Xml.Serialization.XmlSerializerNamespaces xmlns = new System.Xml.Serialization.XmlSerializerNamespaces(
          new[] { new System.Xml.XmlQualifiedName("u", "urn:schemas-upnp-org:service:GroupRenderingControl:1"), });
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/GroupRenderingControl/Control", "GroupRenderingControl", "GetGroupMute")]
    public class GetGroupMuteRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetGroupMuteResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:GroupRenderingControl:1")]
    public partial class GetGroupMuteResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool CurrentMute { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/GroupRenderingControl/Control", "GroupRenderingControl", "GetGroupVolume")]
    public class GetGroupVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetGroupVolumeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:GroupRenderingControl:1")]
    public partial class GetGroupVolumeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int CurrentVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/GroupRenderingControl/Control", "GroupRenderingControl", "SetGroupMute")]
    public class SetGroupMuteRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        public bool DesiredMute { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/GroupRenderingControl/Control", "GroupRenderingControl", "SetGroupVolume")]
    public class SetGroupVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        /// <summary>
        /// New volume between 0 and 100
        /// </summary>
        public int DesiredVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/GroupRenderingControl/Control", "GroupRenderingControl", "SetRelativeGroupVolume")]
    public class SetRelativeGroupVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;

        /// <summary>
        /// Number between -100 and +100
        /// </summary>
        public int Adjustment { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("SetRelativeGroupVolumeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:GroupRenderingControl:1")]
    public partial class SetRelativeGroupVolumeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int NewVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/MediaRenderer/GroupRenderingControl/Control", "GroupRenderingControl", "SnapshotGroupVolume")]
    public class SnapshotGroupVolumeRequest : BaseRequest
    {
        /// <summary>
        /// InstanceID should always be `0`
        /// </summary>
        public int InstanceID { get; set; } = 0;
    }

    private readonly static Dictionary<int, SonosUpnpError> serviceSpecificErrors = new Dictionary<int, SonosUpnpError>{
        { 701, new SonosUpnpError(701, "Player isn't the coordinator") },
    };

    internal override Dictionary<int, SonosUpnpError> ServiceErrors => serviceSpecificErrors.Merge(base.ServiceErrors);

    /// <summary>
    /// GroupRenderingControl is set to might emit these properties in events
    /// </summary>
    public interface IGroupRenderingControlEvent : IServiceEvent
    {
        public bool? GroupMute { get; }

        public int? GroupVolume { get; }

        public bool? GroupVolumeChangeable { get; }
    }
}
