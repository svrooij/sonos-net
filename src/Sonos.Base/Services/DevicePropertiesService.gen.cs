/*
 * Sonos-net DevicePropertiesService
 *
 * File is generated by [@svrooij/sonos-docs](https://github.com/svrooij/sonos-api-docs/tree/main/generator/sonos-docs)
 *
 * Repository https://github.com/svrooij/sonos-net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Sonos.Base.Services;

using System.Threading;
using System.Threading.Tasks;

/// <summary>
/// DevicePropertiesService  - Modify device properties, like LED status and stereo pairs
/// </summary>
public partial class DevicePropertiesService : SonosBaseService<DevicePropertiesService.IDevicePropertiesEvent>
{
    /// <summary>
    /// Create a new DevicePropertiesService
    /// </summary>
    /// <param name="options">Service options</param>
    public DevicePropertiesService(SonosServiceOptions options) : base(SonosService.DeviceProperties, "/DeviceProperties/Control", "/DeviceProperties/Event", options) { }


    /// <summary>
    /// AddBondedZones
    /// </summary>
    /// <param name="request"><see cref="AddBondedZonesRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> AddBondedZonesAsync(AddBondedZonesRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "AddBondedZones");

    /// <summary>
    /// Adds satellites and/or a sub woofer to a (main) player. The satellites become hidden. The main player RINCON_* is mandatory. RR: right - rear, LF: left - front, SW: subwoofer
    /// </summary>
    /// <param name="request"><see cref="AddHTSatelliteRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <remarks>Not all speakers support satellites or sub woofer. Satellites should be of same type (e.g. Play:1)</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> AddHTSatelliteAsync(AddHTSatelliteRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "AddHTSatellite");

    /// <summary>
    /// Create a stereo pair (left, right speakers), right one becomes hidden
    /// </summary>
    /// <param name="request"><see cref="CreateStereoPairRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <remarks>Not all speakers support StereoPairs</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> CreateStereoPairAsync(CreateStereoPairRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "CreateStereoPair");

    /// <summary>
    /// EnterConfigMode
    /// </summary>
    /// <param name="request"><see cref="EnterConfigModeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>EnterConfigModeResponse</returns>
    public Task<EnterConfigModeResponse> EnterConfigModeAsync(EnterConfigModeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<EnterConfigModeRequest, EnterConfigModeResponse>(request, cancellationToken, "EnterConfigMode");

    /// <summary>
    /// ExitConfigMode
    /// </summary>
    /// <param name="request"><see cref="ExitConfigModeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> ExitConfigModeAsync(ExitConfigModeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "ExitConfigMode");

    /// <summary>
    /// GetAutoplayLinkedZones
    /// </summary>
    /// <param name="request"><see cref="GetAutoplayLinkedZonesRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetAutoplayLinkedZonesResponse</returns>
    public Task<GetAutoplayLinkedZonesResponse> GetAutoplayLinkedZonesAsync(GetAutoplayLinkedZonesRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetAutoplayLinkedZonesRequest, GetAutoplayLinkedZonesResponse>(request, cancellationToken, "GetAutoplayLinkedZones");

    /// <summary>
    /// GetAutoplayRoomUUID
    /// </summary>
    /// <param name="request"><see cref="GetAutoplayRoomUUIDRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetAutoplayRoomUUIDResponse</returns>
    public Task<GetAutoplayRoomUUIDResponse> GetAutoplayRoomUUIDAsync(GetAutoplayRoomUUIDRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetAutoplayRoomUUIDRequest, GetAutoplayRoomUUIDResponse>(request, cancellationToken, "GetAutoplayRoomUUID");

    /// <summary>
    /// GetAutoplayVolume
    /// </summary>
    /// <param name="request"><see cref="GetAutoplayVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetAutoplayVolumeResponse</returns>
    public Task<GetAutoplayVolumeResponse> GetAutoplayVolumeAsync(GetAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetAutoplayVolumeRequest, GetAutoplayVolumeResponse>(request, cancellationToken, "GetAutoplayVolume");

    /// <summary>
    /// Get the current button lock state
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetButtonLockStateResponse</returns>
    public Task<GetButtonLockStateResponse> GetButtonLockStateAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<BaseRequest, GetButtonLockStateResponse>(new BaseRequest(), cancellationToken, "GetButtonLockState");

    /// <summary>
    /// GetButtonState
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetButtonStateResponse</returns>
    public Task<GetButtonStateResponse> GetButtonStateAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<BaseRequest, GetButtonStateResponse>(new BaseRequest(), cancellationToken, "GetButtonState");

    /// <summary>
    /// GetHouseholdID
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetHouseholdIDResponse</returns>
    public Task<GetHouseholdIDResponse> GetHouseholdIDAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<BaseRequest, GetHouseholdIDResponse>(new BaseRequest(), cancellationToken, "GetHouseholdID");

    /// <summary>
    /// GetHTForwardState
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetHTForwardStateResponse</returns>
    public Task<GetHTForwardStateResponse> GetHTForwardStateAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<BaseRequest, GetHTForwardStateResponse>(new BaseRequest(), cancellationToken, "GetHTForwardState");

    /// <summary>
    /// Get the current LED state
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetLEDStateResponse</returns>
    public Task<GetLEDStateResponse> GetLEDStateAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<BaseRequest, GetLEDStateResponse>(new BaseRequest(), cancellationToken, "GetLEDState");

    /// <summary>
    /// GetUseAutoplayVolume
    /// </summary>
    /// <param name="request"><see cref="GetUseAutoplayVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetUseAutoplayVolumeResponse</returns>
    public Task<GetUseAutoplayVolumeResponse> GetUseAutoplayVolumeAsync(GetUseAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<GetUseAutoplayVolumeRequest, GetUseAutoplayVolumeResponse>(request, cancellationToken, "GetUseAutoplayVolume");

    /// <summary>
    /// GetZoneAttributes
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetZoneAttributesResponse</returns>
    public Task<GetZoneAttributesResponse> GetZoneAttributesAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<BaseRequest, GetZoneAttributesResponse>(new BaseRequest(), cancellationToken, "GetZoneAttributes");

    /// <summary>
    /// Get information about this specific speaker
    /// </summary>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>GetZoneInfoResponse</returns>
    public Task<GetZoneInfoResponse> GetZoneInfoAsync(CancellationToken cancellationToken = default) => ExecuteRequestAsync<BaseRequest, GetZoneInfoResponse>(new BaseRequest(), cancellationToken, "GetZoneInfo");

    /// <summary>
    /// RemoveBondedZones
    /// </summary>
    /// <param name="request"><see cref="RemoveBondedZonesRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> RemoveBondedZonesAsync(RemoveBondedZonesRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "RemoveBondedZones");

    /// <summary>
    /// Removes a satellite or a sub woofer from (main) player. The satellite becomes visible.
    /// </summary>
    /// <param name="request"><see cref="RemoveHTSatelliteRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <remarks>Not all speakers support satellites or sub woofer. Multiples RINCON_* are not allowed.</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> RemoveHTSatelliteAsync(RemoveHTSatelliteRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "RemoveHTSatellite");

    /// <summary>
    /// RoomDetectionStartChirping
    /// </summary>
    /// <param name="request"><see cref="RoomDetectionStartChirpingRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>RoomDetectionStartChirpingResponse</returns>
    public Task<RoomDetectionStartChirpingResponse> RoomDetectionStartChirpingAsync(RoomDetectionStartChirpingRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync<RoomDetectionStartChirpingRequest, RoomDetectionStartChirpingResponse>(request, cancellationToken, "RoomDetectionStartChirping");

    /// <summary>
    /// RoomDetectionStopChirping
    /// </summary>
    /// <param name="request"><see cref="RoomDetectionStopChirpingRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> RoomDetectionStopChirpingAsync(RoomDetectionStopChirpingRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "RoomDetectionStopChirping");

    /// <summary>
    /// Separate a stereo pair
    /// </summary>
    /// <param name="request"><see cref="SeparateStereoPairRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <remarks>Not all speakers support StereoPairs</remarks>
    /// <returns>Success boolean</returns>
    public Task<bool> SeparateStereoPairAsync(SeparateStereoPairRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SeparateStereoPair");

    /// <summary>
    /// SetAutoplayLinkedZones
    /// </summary>
    /// <param name="request"><see cref="SetAutoplayLinkedZonesRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetAutoplayLinkedZonesAsync(SetAutoplayLinkedZonesRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetAutoplayLinkedZones");

    /// <summary>
    /// SetAutoplayRoomUUID
    /// </summary>
    /// <param name="request"><see cref="SetAutoplayRoomUUIDRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetAutoplayRoomUUIDAsync(SetAutoplayRoomUUIDRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetAutoplayRoomUUID");

    /// <summary>
    /// SetAutoplayVolume
    /// </summary>
    /// <param name="request"><see cref="SetAutoplayVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetAutoplayVolumeAsync(SetAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetAutoplayVolume");

    /// <summary>
    /// Set the button lock state
    /// </summary>
    /// <param name="request"><see cref="SetButtonLockStateRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetButtonLockStateAsync(SetButtonLockStateRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetButtonLockState");

    /// <summary>
    /// Set the LED state
    /// </summary>
    /// <param name="request"><see cref="SetLEDStateRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetLEDStateAsync(SetLEDStateRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetLEDState");

    /// <summary>
    /// SetUseAutoplayVolume
    /// </summary>
    /// <param name="request"><see cref="SetUseAutoplayVolumeRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetUseAutoplayVolumeAsync(SetUseAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetUseAutoplayVolume");

    /// <summary>
    /// SetZoneAttributes
    /// </summary>
    /// <param name="request"><see cref="SetZoneAttributesRequest"/> payload</param>
    /// <param name="cancellationToken"><see cref="CancellationToken" /></param>
    /// <returns>Success boolean</returns>
    public Task<bool> SetZoneAttributesAsync(SetZoneAttributesRequest request, CancellationToken cancellationToken = default) => ExecuteRequestAsync(request, cancellationToken, "SetZoneAttributes");

    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties")]
    public class BaseRequest
    {
        [System.Xml.Serialization.XmlNamespaceDeclarations]
        public System.Xml.Serialization.XmlSerializerNamespaces xmlns = new System.Xml.Serialization.XmlSerializerNamespaces(
          new[] { new System.Xml.XmlQualifiedName("u", "urn:schemas-upnp-org:service:DeviceProperties:1"), });
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "AddBondedZones")]
    public class AddBondedZonesRequest : BaseRequest
    {
        public string ChannelMapSet { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "AddHTSatellite")]
    public class AddHTSatelliteRequest : BaseRequest
    {
        /// <summary>
        /// example: `RINCON_000PPP1400:LF,RF;RINCON_000RRR1400:RR;RINCON_000SSS1400:LR;RINCON_000QQQ1400:SW`
        /// </summary>
        public string HTSatChanMapSet { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "CreateStereoPair")]
    public class CreateStereoPairRequest : BaseRequest
    {
        /// <summary>
        /// example: `RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF`
        /// </summary>
        public string ChannelMapSet { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "EnterConfigMode")]
    public class EnterConfigModeRequest : BaseRequest
    {
        public string Mode { get; set; }

        public string Options { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("EnterConfigModeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class EnterConfigModeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string State { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "ExitConfigMode")]
    public class ExitConfigModeRequest : BaseRequest
    {
        public string Options { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "GetAutoplayLinkedZones")]
    public class GetAutoplayLinkedZonesRequest : BaseRequest
    {
        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetAutoplayLinkedZonesResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetAutoplayLinkedZonesResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool IncludeLinkedZones { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "GetAutoplayRoomUUID")]
    public class GetAutoplayRoomUUIDRequest : BaseRequest
    {
        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetAutoplayRoomUUIDResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetAutoplayRoomUUIDResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string RoomUUID { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "GetAutoplayVolume")]
    public class GetAutoplayVolumeRequest : BaseRequest
    {
        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetAutoplayVolumeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetAutoplayVolumeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int CurrentVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetButtonLockStateResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetButtonLockStateResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentButtonLockState { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetButtonStateResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetButtonStateResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string State { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetHouseholdIDResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetHouseholdIDResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentHouseholdID { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetHTForwardStateResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetHTForwardStateResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool IsHTForwardEnabled { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetLEDStateResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetLEDStateResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentLEDState { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "GetUseAutoplayVolume")]
    public class GetUseAutoplayVolumeRequest : BaseRequest
    {
        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetUseAutoplayVolumeResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetUseAutoplayVolumeResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public bool UseVolume { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetZoneAttributesResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetZoneAttributesResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentZoneName { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentIcon { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentConfiguration { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CurrentTargetRoomName { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("GetZoneInfoResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class GetZoneInfoResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string SerialNumber { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string SoftwareVersion { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string DisplaySoftwareVersion { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string HardwareVersion { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string IPAddress { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string MACAddress { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string CopyrightInfo { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public string ExtraInfo { get; set; }

        /// <summary>
        /// SPDIF input, `0` not connected / `2` stereo / `7` Dolby 2.0 / `18` dolby 5.1 / `21` not listening / `22` silence
        /// </summary>
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int HTAudioIn { get; set; }

        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int Flags { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "RemoveBondedZones")]
    public class RemoveBondedZonesRequest : BaseRequest
    {
        public string ChannelMapSet { get; set; }

        [System.Xml.Serialization.XmlIgnore]
        public bool KeepGrouped { get; set; }

        /// <remarks>Noting to see here, XmlSerializer issue, use 'KeepGrouped'</remarks>
        [System.Xml.Serialization.XmlElement("KeepGrouped")]
        public int _KeepGrouped { get { return KeepGrouped ? 1 : 0; } set { KeepGrouped = value == 1; } }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "RemoveHTSatellite")]
    public class RemoveHTSatelliteRequest : BaseRequest
    {
        /// <summary>
        /// example: `RINCON_000RRR1400`
        /// </summary>
        public string SatRoomUUID { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "RoomDetectionStartChirping")]
    public class RoomDetectionStartChirpingRequest : BaseRequest
    {
        public int Channel { get; set; }

        public int DurationMilliseconds { get; set; }

        [System.Xml.Serialization.XmlIgnore]
        public bool ChirpIfPlayingSwappableAudio { get; set; }

        /// <remarks>Noting to see here, XmlSerializer issue, use 'ChirpIfPlayingSwappableAudio'</remarks>
        [System.Xml.Serialization.XmlElement("ChirpIfPlayingSwappableAudio")]
        public int _ChirpIfPlayingSwappableAudio { get { return ChirpIfPlayingSwappableAudio ? 1 : 0; } set { ChirpIfPlayingSwappableAudio = value == 1; } }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlType("RoomDetectionStartChirpingResponse", AnonymousType = true, Namespace = "urn:schemas-upnp-org:service:DeviceProperties:1")]
    public partial class RoomDetectionStartChirpingResponse
    {
        [System.Xml.Serialization.XmlElement(Namespace = "")]
        public int PlayId { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "RoomDetectionStopChirping")]
    public class RoomDetectionStopChirpingRequest : BaseRequest
    {
        public int PlayId { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SeparateStereoPair")]
    public class SeparateStereoPairRequest : BaseRequest
    {
        /// <summary>
        /// example: `RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF`
        /// </summary>
        public string ChannelMapSet { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SetAutoplayLinkedZones")]
    public class SetAutoplayLinkedZonesRequest : BaseRequest
    {
        [System.Xml.Serialization.XmlIgnore]
        public bool IncludeLinkedZones { get; set; }

        /// <remarks>Noting to see here, XmlSerializer issue, use 'IncludeLinkedZones'</remarks>
        [System.Xml.Serialization.XmlElement("IncludeLinkedZones")]
        public int _IncludeLinkedZones { get { return IncludeLinkedZones ? 1 : 0; } set { IncludeLinkedZones = value == 1; } }

        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SetAutoplayRoomUUID")]
    public class SetAutoplayRoomUUIDRequest : BaseRequest
    {
        public string RoomUUID { get; set; }

        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SetAutoplayVolume")]
    public class SetAutoplayVolumeRequest : BaseRequest
    {
        public int Volume { get; set; }

        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SetButtonLockState")]
    public class SetButtonLockStateRequest : BaseRequest
    {
        public string DesiredButtonLockState { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SetLEDState")]
    public class SetLEDStateRequest : BaseRequest
    {
        public string DesiredLEDState { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SetUseAutoplayVolume")]
    public class SetUseAutoplayVolumeRequest : BaseRequest
    {
        [System.Xml.Serialization.XmlIgnore]
        public bool UseVolume { get; set; }

        /// <remarks>Noting to see here, XmlSerializer issue, use 'UseVolume'</remarks>
        [System.Xml.Serialization.XmlElement("UseVolume")]
        public int _UseVolume { get { return UseVolume ? 1 : 0; } set { UseVolume = value == 1; } }

        public string Source { get; set; }
    }

    [System.Serializable()]
    [System.Xml.Serialization.XmlRoot(Namespace = "")]
    [SonosServiceRequest("/DeviceProperties/Control", "DeviceProperties", "SetZoneAttributes")]
    public class SetZoneAttributesRequest : BaseRequest
    {
        public string DesiredZoneName { get; set; }

        public string DesiredIcon { get; set; }

        public string DesiredConfiguration { get; set; }

        public string DesiredTargetRoomName { get; set; }
    }

    /// <summary>
    /// DeviceProperties is set to might emit these properties in events
    /// </summary>
    public partial interface IDevicePropertiesEvent : IServiceEvent
    {
        public bool? AirPlayEnabled { get; }

        public bool? AutoplayIncludeLinkedZones { get; }

        public string? AutoplayRoomUUID { get; }

        public string? AutoplaySource { get; }

        public bool? AutoplayUseVolume { get; }

        public int? AutoplayVolume { get; }

        public string? AvailableRoomCalibration { get; }

        public int? BehindWifiExtender { get; }

        public string? ButtonLockState { get; }

        public int? ChannelFreq { get; }

        public string? ChannelMapSet { get; }

        public string? ConfigMode { get; }

        public string? Configuration { get; }

        public string? CopyrightInfo { get; }

        public string? DisplaySoftwareVersion { get; }

        public bool? EthLink { get; }

        public string? ExtraInfo { get; }

        public int? Flags { get; }

        public string? HardwareVersion { get; }

        public bool? HasConfiguredSSID { get; }

        public bool? HdmiCecAvailable { get; }

        public string? HouseholdID { get; }

        public int? HTAudioIn { get; }

        public int? HTBondedZoneCommitState { get; }

        public bool? HTForwardEnabled { get; }

        public int? HTFreq { get; }

        public string? HTSatChanMapSet { get; }

        public string? Icon { get; }

        public bool? Invisible { get; }

        public string? IPAddress { get; }

        public bool? IsIdle { get; }

        public bool? IsZoneBridge { get; }

        public bool? KeepGrouped { get; }

        public string? LastChangedPlayState { get; }

        public string? LEDState { get; }

        public string? MACAddress { get; }

        public int? MicEnabled { get; }

        public string? MoreInfo { get; }

        public int? Orientation { get; }

        public int? RoomCalibrationState { get; }

        public string? SatRoomUUID { get; }

        public int? SecureRegState { get; }

        public string? SerialNumber { get; }

        public string? SettingsReplicationState { get; }

        public string? SoftwareVersion { get; }

        public bool? SupportsAudioClip { get; }

        public bool? SupportsAudioIn { get; }

        public string? TargetRoomName { get; }

        public bool? TVConfigurationError { get; }

        public int? VoiceConfigState { get; }

        public bool? WifiEnabled { get; }

        public bool? WirelessLeafOnly { get; }

        public int? WirelessMode { get; }

        public string? ZoneName { get; }
    }

    /// <summary>
    /// AddBondedZones
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use AddBondedZonesAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> AddBondedZones(AddBondedZonesRequest request, CancellationToken cancellationToken = default) => AddBondedZonesAsync(request, cancellationToken);

    /// <summary>
    /// Adds satellites and/or a sub woofer to a (main) player. The satellites become hidden. The main player RINCON_* is mandatory. RR: right - rear, LF: left - front, SW: subwoofer
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Not all speakers support satellites or sub woofer. Satellites should be of same type (e.g. Play:1)</remarks>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use AddHTSatelliteAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> AddHTSatellite(AddHTSatelliteRequest request, CancellationToken cancellationToken = default) => AddHTSatelliteAsync(request, cancellationToken);

    /// <summary>
    /// Create a stereo pair (left, right speakers), right one becomes hidden
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Not all speakers support StereoPairs</remarks>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use CreateStereoPairAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> CreateStereoPair(CreateStereoPairRequest request, CancellationToken cancellationToken = default) => CreateStereoPairAsync(request, cancellationToken);

    /// <summary>
    /// EnterConfigMode
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>EnterConfigModeResponse</returns>
    [Obsolete("This method is obsolete. Use EnterConfigModeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<EnterConfigModeResponse> EnterConfigMode(EnterConfigModeRequest request, CancellationToken cancellationToken = default) => EnterConfigModeAsync(request, cancellationToken);

    /// <summary>
    /// ExitConfigMode
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use ExitConfigModeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> ExitConfigMode(ExitConfigModeRequest request, CancellationToken cancellationToken = default) => ExitConfigModeAsync(request, cancellationToken);

    /// <summary>
    /// GetAutoplayLinkedZones
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetAutoplayLinkedZonesResponse</returns>
    [Obsolete("This method is obsolete. Use GetAutoplayLinkedZonesAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetAutoplayLinkedZonesResponse> GetAutoplayLinkedZones(GetAutoplayLinkedZonesRequest request, CancellationToken cancellationToken = default) => GetAutoplayLinkedZonesAsync(request, cancellationToken);

    /// <summary>
    /// GetAutoplayRoomUUID
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetAutoplayRoomUUIDResponse</returns>
    [Obsolete("This method is obsolete. Use GetAutoplayRoomUUIDAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetAutoplayRoomUUIDResponse> GetAutoplayRoomUUID(GetAutoplayRoomUUIDRequest request, CancellationToken cancellationToken = default) => GetAutoplayRoomUUIDAsync(request, cancellationToken);

    /// <summary>
    /// GetAutoplayVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetAutoplayVolumeResponse</returns>
    [Obsolete("This method is obsolete. Use GetAutoplayVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetAutoplayVolumeResponse> GetAutoplayVolume(GetAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => GetAutoplayVolumeAsync(request, cancellationToken);

    /// <summary>
    /// Get the current button lock state
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetButtonLockStateResponse</returns>
    [Obsolete("This method is obsolete. Use GetButtonLockStateAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetButtonLockStateResponse> GetButtonLockState(CancellationToken cancellationToken = default) => GetButtonLockStateAsync(cancellationToken);

    /// <summary>
    /// GetButtonState
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetButtonStateResponse</returns>
    [Obsolete("This method is obsolete. Use GetButtonStateAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetButtonStateResponse> GetButtonState(CancellationToken cancellationToken = default) => GetButtonStateAsync(cancellationToken);

    /// <summary>
    /// GetHouseholdID
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetHouseholdIDResponse</returns>
    [Obsolete("This method is obsolete. Use GetHouseholdIDAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetHouseholdIDResponse> GetHouseholdID(CancellationToken cancellationToken = default) => GetHouseholdIDAsync(cancellationToken);

    /// <summary>
    /// GetHTForwardState
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetHTForwardStateResponse</returns>
    [Obsolete("This method is obsolete. Use GetHTForwardStateAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetHTForwardStateResponse> GetHTForwardState(CancellationToken cancellationToken = default) => GetHTForwardStateAsync(cancellationToken);

    /// <summary>
    /// Get the current LED state
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetLEDStateResponse</returns>
    [Obsolete("This method is obsolete. Use GetLEDStateAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetLEDStateResponse> GetLEDState(CancellationToken cancellationToken = default) => GetLEDStateAsync(cancellationToken);

    /// <summary>
    /// GetUseAutoplayVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetUseAutoplayVolumeResponse</returns>
    [Obsolete("This method is obsolete. Use GetUseAutoplayVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetUseAutoplayVolumeResponse> GetUseAutoplayVolume(GetUseAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => GetUseAutoplayVolumeAsync(request, cancellationToken);

    /// <summary>
    /// GetZoneAttributes
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetZoneAttributesResponse</returns>
    [Obsolete("This method is obsolete. Use GetZoneAttributesAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetZoneAttributesResponse> GetZoneAttributes(CancellationToken cancellationToken = default) => GetZoneAttributesAsync(cancellationToken);

    /// <summary>
    /// Get information about this specific speaker
    /// </summary>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>GetZoneInfoResponse</returns>
    [Obsolete("This method is obsolete. Use GetZoneInfoAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<GetZoneInfoResponse> GetZoneInfo(CancellationToken cancellationToken = default) => GetZoneInfoAsync(cancellationToken);

    /// <summary>
    /// RemoveBondedZones
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use RemoveBondedZonesAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> RemoveBondedZones(RemoveBondedZonesRequest request, CancellationToken cancellationToken = default) => RemoveBondedZonesAsync(request, cancellationToken);

    /// <summary>
    /// Removes a satellite or a sub woofer from (main) player. The satellite becomes visible.
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Not all speakers support satellites or sub woofer. Multiples RINCON_* are not allowed.</remarks>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use RemoveHTSatelliteAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> RemoveHTSatellite(RemoveHTSatelliteRequest request, CancellationToken cancellationToken = default) => RemoveHTSatelliteAsync(request, cancellationToken);

    /// <summary>
    /// RoomDetectionStartChirping
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>RoomDetectionStartChirpingResponse</returns>
    [Obsolete("This method is obsolete. Use RoomDetectionStartChirpingAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<RoomDetectionStartChirpingResponse> RoomDetectionStartChirping(RoomDetectionStartChirpingRequest request, CancellationToken cancellationToken = default) => RoomDetectionStartChirpingAsync(request, cancellationToken);

    /// <summary>
    /// RoomDetectionStopChirping
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use RoomDetectionStopChirpingAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> RoomDetectionStopChirping(RoomDetectionStopChirpingRequest request, CancellationToken cancellationToken = default) => RoomDetectionStopChirpingAsync(request, cancellationToken);

    /// <summary>
    /// Separate a stereo pair
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <remarks>Not all speakers support StereoPairs</remarks>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SeparateStereoPairAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SeparateStereoPair(SeparateStereoPairRequest request, CancellationToken cancellationToken = default) => SeparateStereoPairAsync(request, cancellationToken);

    /// <summary>
    /// SetAutoplayLinkedZones
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetAutoplayLinkedZonesAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetAutoplayLinkedZones(SetAutoplayLinkedZonesRequest request, CancellationToken cancellationToken = default) => SetAutoplayLinkedZonesAsync(request, cancellationToken);

    /// <summary>
    /// SetAutoplayRoomUUID
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetAutoplayRoomUUIDAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetAutoplayRoomUUID(SetAutoplayRoomUUIDRequest request, CancellationToken cancellationToken = default) => SetAutoplayRoomUUIDAsync(request, cancellationToken);

    /// <summary>
    /// SetAutoplayVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetAutoplayVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetAutoplayVolume(SetAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => SetAutoplayVolumeAsync(request, cancellationToken);

    /// <summary>
    /// Set the button lock state
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetButtonLockStateAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetButtonLockState(SetButtonLockStateRequest request, CancellationToken cancellationToken = default) => SetButtonLockStateAsync(request, cancellationToken);

    /// <summary>
    /// Set the LED state
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetLEDStateAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetLEDState(SetLEDStateRequest request, CancellationToken cancellationToken = default) => SetLEDStateAsync(request, cancellationToken);

    /// <summary>
    /// SetUseAutoplayVolume
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetUseAutoplayVolumeAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetUseAutoplayVolume(SetUseAutoplayVolumeRequest request, CancellationToken cancellationToken = default) => SetUseAutoplayVolumeAsync(request, cancellationToken);

    /// <summary>
    /// SetZoneAttributes
    /// </summary>
    /// <param name="request">Body payload</param>
    /// <param name="cancellationToken">CancellationToken</param>
    /// <returns>Success boolean</returns>
    [Obsolete("This method is obsolete. Use SetZoneAttributesAsync instead.")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public Task<bool> SetZoneAttributes(SetZoneAttributesRequest request, CancellationToken cancellationToken = default) => SetZoneAttributesAsync(request, cancellationToken);
}
