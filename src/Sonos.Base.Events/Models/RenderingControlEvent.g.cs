/*
 * Sonos-net RenderingControlService event parsing
 *
 * File is generated by [@svrooij/sonos-docs](https://github.com/svrooij/sonos-api-docs/tree/main/generator/sonos-docs)
 *
 * Repository https://github.com/svrooij/sonos-net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Sonos.Base.Events.Models;

using Sonos.Base.Services;


#nullable enable
/// <summary>
/// RenderingControl is set to might emit these properties in events
/// </summary>
public partial class RenderingControlEvent: RenderingControlService.IRenderingControlEvent {
    public string? AudioDelay { get; init; }

    public string? AudioDelayLeftRear { get; init; }

    public string? AudioDelayRightRear { get; init; }

    public int? Bass { get; init; }

    public string? DialogLevel { get; init; }

    public int? EQValue { get; init; }

    public bool? HeadphoneConnected { get; init; }

    public int? HeightChannelLevel { get; init; }

    public string? LastChange { get; init; }

    public bool? Loudness { get; init; }

    public string? MusicSurroundLevel { get; init; }

    public ChannelMapBool? Mute { get; init; }

    public bool? NightMode { get; init; }

    public bool? OutputFixed { get; init; }

    public string? PresetNameList { get; init; }

    public bool? RoomCalibrationAvailable { get; init; }

    public string? RoomCalibrationCalibrationMode { get; init; }

    public string? RoomCalibrationCoefficients { get; init; }

    public bool? RoomCalibrationEnabled { get; init; }

    public string? RoomCalibrationID { get; init; }

    public int? SpeakerSize { get; init; }

    public string? SubCrossover { get; init; }

    public bool? SubEnabled { get; init; }

    public string? SubGain { get; init; }

    public string? SubPolarity { get; init; }

    public bool? SupportsOutputFixed { get; init; }

    public bool? SurroundEnabled { get; init; }

    public string? SurroundLevel { get; init; }

    public string? SurroundMode { get; init; }

    public int? Treble { get; init; }

    public ChannelMapInt? Volume { get; init; }

    public int? VolumeDB { get; init; }

    internal static RenderingControlEvent? FromDictionary(Dictionary<string, string>? dic)
    {
        if (dic is null) {
            return null;
        }
        return new RenderingControlEvent {
            AudioDelay = dic.TryGetString(nameof(AudioDelay)),
            AudioDelayLeftRear = dic.TryGetString(nameof(AudioDelayLeftRear)),
            AudioDelayRightRear = dic.TryGetString(nameof(AudioDelayRightRear)),
            Bass = dic.TryGetInt(nameof(Bass)),
            DialogLevel = dic.TryGetString(nameof(DialogLevel)),
            EQValue = dic.TryGetInt(nameof(EQValue)),
            HeadphoneConnected = dic.TryGetBool(nameof(HeadphoneConnected)),
            HeightChannelLevel = dic.TryGetInt(nameof(HeightChannelLevel)),
            LastChange = dic.TryGetString(nameof(LastChange)),
            Loudness = dic.TryGetBool(nameof(Loudness)),
            MusicSurroundLevel = dic.TryGetString(nameof(MusicSurroundLevel)),
            Mute = dic.TryGetMapBool(nameof(Mute)),
            NightMode = dic.TryGetBool(nameof(NightMode)),
            OutputFixed = dic.TryGetBool(nameof(OutputFixed)),
            PresetNameList = dic.TryGetString(nameof(PresetNameList)),
            RoomCalibrationAvailable = dic.TryGetBool(nameof(RoomCalibrationAvailable)),
            RoomCalibrationCalibrationMode = dic.TryGetString(nameof(RoomCalibrationCalibrationMode)),
            RoomCalibrationCoefficients = dic.TryGetString(nameof(RoomCalibrationCoefficients)),
            RoomCalibrationEnabled = dic.TryGetBool(nameof(RoomCalibrationEnabled)),
            RoomCalibrationID = dic.TryGetString(nameof(RoomCalibrationID)),
            SpeakerSize = dic.TryGetInt(nameof(SpeakerSize)),
            SubCrossover = dic.TryGetString(nameof(SubCrossover)),
            SubEnabled = dic.TryGetBool(nameof(SubEnabled)),
            SubGain = dic.TryGetString(nameof(SubGain)),
            SubPolarity = dic.TryGetString(nameof(SubPolarity)),
            SupportsOutputFixed = dic.TryGetBool(nameof(SupportsOutputFixed)),
            SurroundEnabled = dic.TryGetBool(nameof(SurroundEnabled)),
            SurroundLevel = dic.TryGetString(nameof(SurroundLevel)),
            SurroundMode = dic.TryGetString(nameof(SurroundMode)),
            Treble = dic.TryGetInt(nameof(Treble)),
            Volume = dic.TryGetMapInt(nameof(Volume)),
            VolumeDB = dic.TryGetInt(nameof(VolumeDB)),
        };
    }
}

